{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-24T10:15:56.582Z",
    "end": "2025-06-24T10:16:01.684Z",
    "duration": 5102,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "84980027-7bfe-44bc-8980-2e2394a68283",
      "title": "",
      "fullFile": "C:\\Users\\AYYESA - ARRAZI\\Documents\\Sesi-9\\uji\\test-sauce.js",
      "file": "\\uji\\test-sauce.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6e3f182-3ed2-4874-af54-9313a1c29584",
          "title": "SauceDemo E2E Automation - Login & Sort Products",
          "fullFile": "C:\\Users\\AYYESA - ARRAZI\\Documents\\Sesi-9\\uji\\test-sauce.js",
          "file": "\\uji\\test-sauce.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SauceDemo E2E Automation - Login & Sort Products\"",
              "fullTitle": "SauceDemo E2E Automation - Login & Sort Products \"before each\" hook in \"SauceDemo E2E Automation - Login & Sort Products\"",
              "timedOut": false,
              "duration": 1484,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Inisialisasi Chrome driver\ndriver = await new Builder().forBrowser('chrome').build();\nawait driver.manage().window().maximize(); // Maksimalisasi jendela browser\nawait driver.get('https://www.saucedemo.com'); // Navigasi ke URL",
              "err": {},
              "uuid": "2e0c5477-f266-4247-b06c-5069d522977a",
              "parentUUID": "a6e3f182-3ed2-4874-af54-9313a1c29584",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"SauceDemo E2E Automation - Login & Sort Products\"",
              "fullTitle": "SauceDemo E2E Automation - Login & Sort Products \"after each\" hook in \"SauceDemo E2E Automation - Login & Sort Products\"",
              "timedOut": false,
              "duration": 66,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n    await driver.quit(); // Tutup browser setelah setiap test case selesai\n}",
              "err": {},
              "uuid": "a34bfda5-2469-4bc5-b76e-315d82f37b78",
              "parentUUID": "a6e3f182-3ed2-4874-af54-9313a1c29584",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Harus berhasil login dengan kredensial yang valid",
              "fullTitle": "SauceDemo E2E Automation - Login & Sort Products Harus berhasil login dengan kredensial yang valid",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Input kredensial\nlet inputUsername = await driver.findElement(By.css('[data-test=\"username\"]'));\nlet inputPassword = await driver.findElement(By.xpath('//*[@data-test=\"password\"]'));\nlet buttonLogin = await driver.findElement(By.className('submit-button btn_action'));\nawait inputUsername.sendKeys('standard_user');\nawait inputPassword.sendKeys('secret_sauce');\nawait buttonLogin.click();\n// Verifikasi navigasi ke halaman produk setelah login\nlet productsPageTitle = await driver.wait(\n    until.elementLocated(By.className('title')),\n    10000,\n    'Elemen judul halaman produk tidak ditemukan setelah login.'\n);\nlet actualTitleText = await productsPageTitle.getText();\nassert.strictEqual(actualTitleText, 'Products', 'Judul halaman tidak menampilkan \"Products\" setelah login.');\n// Verifikasi elemen keranjang belanja ada (indikator sukses login)\nlet buttonCart = await driver.wait(\n    until.elementLocated(By.xpath('//*[@data-test=\"shopping-cart-link\"]')),\n    10000,\n    'Elemen keranjang belanja tidak ditemukan.'\n);\nawait driver.wait(until.elementIsVisible(buttonCart), 5000, 'Keranjang belanja tidak terlihat.');\nassert(await buttonCart.isDisplayed(), 'Keranjang belanja tidak ditampilkan');",
              "err": {},
              "uuid": "54f23c9f-a0a0-4185-95f1-09d467735889",
              "parentUUID": "a6e3f182-3ed2-4874-af54-9313a1c29584",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Harus bisa mengurutkan produk dari Z-A setelah login",
              "fullTitle": "SauceDemo E2E Automation - Login & Sort Products Harus bisa mengurutkan produk dari Z-A setelah login",
              "timedOut": false,
              "duration": 1610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// --- Langkah Login (diulang karena beforeEach hanya menyiapkan browser, bukan login) ---\nlet inputUsername = await driver.findElement(By.css('[data-test=\"username\"]'));\nlet inputPassword = await driver.findElement(By.xpath('//*[@data-test=\"password\"]'));\nlet buttonLogin = await driver.findElement(By.className('submit-button btn_action'));\nawait inputUsername.sendKeys('standard_user');\nawait inputPassword.sendKeys('secret_sauce');\nawait buttonLogin.click();\n// Tunggu hingga halaman produk dimuat\nawait driver.wait(\n    until.elementLocated(By.className('product_sort_container')),\n    10000,\n    'Dropdown pengurutan produk tidak ditemukan.'\n);\n// Temukan elemen dropdown pengurutan\nlet sortDropdownElement = await driver.findElement(By.className('product_sort_container'));\nlet sortDropdown = new Select(sortDropdownElement); // Inisialisasi objek Select\n// Lakukan pengurutan dari Z-A (Name (Z to A))\nawait sortDropdown.selectByValue('za');\n// Tunggu sejenak agar UI memperbarui (opsional, bisa diganti dengan tunggu elemen spesifik berubah)\nawait driver.sleep(1000);\n// Verifikasi pengurutan: Ambil nama-nama produk dan cek urutannya\nlet productNames = await driver.findElements(By.className('inventory_item_name'));\nlet names = [];\nfor (let product of productNames) {\n    names.push(await product.getText());\n}\n// Buat salinan dan urutkan secara descending secara manual untuk perbandingan\nlet sortedNamesExpected = [...names].sort((a, b) => b.localeCompare(a)); // Z-A\n// Assert bahwa nama produk yang ditampilkan sesuai dengan urutan Z-A yang diharapkan\nassert.deepStrictEqual(names, sortedNamesExpected, 'Produk tidak diurutkan dari Z-A dengan benar.');\n// (Opsional) Verifikasi item pertama setelah diurutkan dari Z-A\n// let firstProductName = await driver.findElement(By.css('.inventory_item:first-child .inventory_item_name')).getText();\n// assert.strictEqual(firstProductName, 'Test.allTheThings() T-Shirt (Red)', 'Item pertama setelah Z-A tidak sesuai.');",
              "err": {},
              "uuid": "aac41d1a-559f-48e5-a1a0-c43b9916d7cf",
              "parentUUID": "a6e3f182-3ed2-4874-af54-9313a1c29584",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54f23c9f-a0a0-4185-95f1-09d467735889",
            "aac41d1a-559f-48e5-a1a0-c43b9916d7cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2066,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}